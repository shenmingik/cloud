// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ik {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownLoadFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownLoadFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownLoadFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownLoadFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchFileResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFileResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_request_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_request_2eproto() {
  protobuf_AddDesc_request_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "request.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, request_content_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  UpFileRequest_descriptor_ = file->message_type(1);
  static const int UpFileRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpFileRequest, file_name_),
  };
  UpFileRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpFileRequest_descriptor_,
      UpFileRequest::default_instance_,
      UpFileRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpFileRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpFileRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpFileRequest, _is_default_instance_));
  UpFileResponse_descriptor_ = file->message_type(2);
  static const int UpFileResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpFileResponse, is_ok_),
  };
  UpFileResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpFileResponse_descriptor_,
      UpFileResponse::default_instance_,
      UpFileResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpFileResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpFileResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpFileResponse, _is_default_instance_));
  DownLoadFileRequest_descriptor_ = file->message_type(3);
  static const int DownLoadFileRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadFileRequest, file_name_),
  };
  DownLoadFileRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DownLoadFileRequest_descriptor_,
      DownLoadFileRequest::default_instance_,
      DownLoadFileRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DownLoadFileRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadFileRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadFileRequest, _is_default_instance_));
  DownLoadFileResponse_descriptor_ = file->message_type(4);
  static const int DownLoadFileResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadFileResponse, is_done_),
  };
  DownLoadFileResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DownLoadFileResponse_descriptor_,
      DownLoadFileResponse::default_instance_,
      DownLoadFileResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DownLoadFileResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadFileResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadFileResponse, _is_default_instance_));
  SearchFileRequest_descriptor_ = file->message_type(5);
  static const int SearchFileRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFileRequest, match_str_),
  };
  SearchFileRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchFileRequest_descriptor_,
      SearchFileRequest::default_instance_,
      SearchFileRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchFileRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFileRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFileRequest, _is_default_instance_));
  SearchFileResponse_descriptor_ = file->message_type(6);
  static const int SearchFileResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFileResponse, file_names_),
  };
  SearchFileResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchFileResponse_descriptor_,
      SearchFileResponse::default_instance_,
      SearchFileResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SearchFileResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFileResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchFileResponse, _is_default_instance_));
  DeleteFileRequest_descriptor_ = file->message_type(7);
  static const int DeleteFileRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileRequest, file_name_),
  };
  DeleteFileRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteFileRequest_descriptor_,
      DeleteFileRequest::default_instance_,
      DeleteFileRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteFileRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileRequest, _is_default_instance_));
  DeleteFileResponse_descriptor_ = file->message_type(8);
  static const int DeleteFileResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileResponse, is_ok_),
  };
  DeleteFileResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteFileResponse_descriptor_,
      DeleteFileResponse::default_instance_,
      DeleteFileResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteFileResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_request_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpFileRequest_descriptor_, &UpFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpFileResponse_descriptor_, &UpFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DownLoadFileRequest_descriptor_, &DownLoadFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DownLoadFileResponse_descriptor_, &DownLoadFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchFileRequest_descriptor_, &SearchFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchFileResponse_descriptor_, &SearchFileResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteFileRequest_descriptor_, &DeleteFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteFileResponse_descriptor_, &DeleteFileResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_request_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete UpFileRequest::default_instance_;
  delete UpFileRequest_reflection_;
  delete UpFileResponse::default_instance_;
  delete UpFileResponse_reflection_;
  delete DownLoadFileRequest::default_instance_;
  delete DownLoadFileRequest_reflection_;
  delete DownLoadFileResponse::default_instance_;
  delete DownLoadFileResponse_reflection_;
  delete SearchFileRequest::default_instance_;
  delete SearchFileRequest_reflection_;
  delete SearchFileResponse::default_instance_;
  delete SearchFileResponse_reflection_;
  delete DeleteFileRequest::default_instance_;
  delete DeleteFileRequest_reflection_;
  delete DeleteFileResponse::default_instance_;
  delete DeleteFileResponse_reflection_;
}

void protobuf_AddDesc_request_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_request_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rrequest.proto\022\002ik\"8\n\007Request\022\024\n\014reques"
    "t_type\030\001 \001(\014\022\027\n\017request_content\030\002 \001(\014\"\"\n"
    "\rUpFileRequest\022\021\n\tfile_name\030\001 \001(\014\"\037\n\016UpF"
    "ileResponse\022\r\n\005is_ok\030\001 \001(\010\"(\n\023DownLoadFi"
    "leRequest\022\021\n\tfile_name\030\001 \001(\014\"\'\n\024DownLoad"
    "FileResponse\022\017\n\007is_done\030\001 \001(\010\"&\n\021SearchF"
    "ileRequest\022\021\n\tmatch_str\030\001 \001(\014\"(\n\022SearchF"
    "ileResponse\022\022\n\nfile_names\030\001 \003(\014\"&\n\021Delet"
    "eFileRequest\022\021\n\tfile_name\030\001 \001(\014\"#\n\022Delet"
    "eFileResponse\022\r\n\005is_ok\030\001 \001(\010b\006proto3", 396);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "request.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  UpFileRequest::default_instance_ = new UpFileRequest();
  UpFileResponse::default_instance_ = new UpFileResponse();
  DownLoadFileRequest::default_instance_ = new DownLoadFileRequest();
  DownLoadFileResponse::default_instance_ = new DownLoadFileResponse();
  SearchFileRequest::default_instance_ = new SearchFileRequest();
  SearchFileResponse::default_instance_ = new SearchFileResponse();
  DeleteFileRequest::default_instance_ = new DeleteFileRequest();
  DeleteFileResponse::default_instance_ = new DeleteFileResponse();
  Request::default_instance_->InitAsDefaultInstance();
  UpFileRequest::default_instance_->InitAsDefaultInstance();
  UpFileResponse::default_instance_->InitAsDefaultInstance();
  DownLoadFileRequest::default_instance_->InitAsDefaultInstance();
  DownLoadFileResponse::default_instance_->InitAsDefaultInstance();
  SearchFileRequest::default_instance_->InitAsDefaultInstance();
  SearchFileResponse::default_instance_->InitAsDefaultInstance();
  DeleteFileRequest::default_instance_->InitAsDefaultInstance();
  DeleteFileResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_request_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_request_2eproto {
  StaticDescriptorInitializer_request_2eproto() {
    protobuf_AddDesc_request_2eproto();
  }
} static_descriptor_initializer_request_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kRequestTypeFieldNumber;
const int Request::kRequestContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:ik.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  request_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:ik.Request)
  request_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes request_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request_content;
        break;
      }

      // optional bytes request_content = 2;
      case 2: {
        if (tag == 18) {
         parse_request_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik.Request)
  // optional bytes request_type = 1;
  if (this->request_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->request_type(), output);
  }

  // optional bytes request_content = 2;
  if (this->request_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->request_content(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik.Request)
  // optional bytes request_type = 1;
  if (this->request_type().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->request_type(), target);
  }

  // optional bytes request_content = 2;
  if (this->request_content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->request_content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik.Request)
  int total_size = 0;

  // optional bytes request_type = 1;
  if (this->request_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->request_type());
  }

  // optional bytes request_content = 2;
  if (this->request_content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->request_content());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.request_type().size() > 0) {

    request_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_type_);
  }
  if (from.request_content().size() > 0) {

    request_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_content_);
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  request_type_.Swap(&other->request_type_);
  request_content_.Swap(&other->request_content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional bytes request_type = 1;
void Request::clear_request_type() {
  request_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::request_type() const {
  // @@protoc_insertion_point(field_get:ik.Request.request_type)
  return request_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_request_type(const ::std::string& value) {
  
  request_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik.Request.request_type)
}
 void Request::set_request_type(const char* value) {
  
  request_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik.Request.request_type)
}
 void Request::set_request_type(const void* value, size_t size) {
  
  request_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik.Request.request_type)
}
 ::std::string* Request::mutable_request_type() {
  
  // @@protoc_insertion_point(field_mutable:ik.Request.request_type)
  return request_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_request_type() {
  // @@protoc_insertion_point(field_release:ik.Request.request_type)
  
  return request_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_request_type(::std::string* request_type) {
  if (request_type != NULL) {
    
  } else {
    
  }
  request_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_type);
  // @@protoc_insertion_point(field_set_allocated:ik.Request.request_type)
}

// optional bytes request_content = 2;
void Request::clear_request_content() {
  request_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::request_content() const {
  // @@protoc_insertion_point(field_get:ik.Request.request_content)
  return request_content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_request_content(const ::std::string& value) {
  
  request_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik.Request.request_content)
}
 void Request::set_request_content(const char* value) {
  
  request_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik.Request.request_content)
}
 void Request::set_request_content(const void* value, size_t size) {
  
  request_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik.Request.request_content)
}
 ::std::string* Request::mutable_request_content() {
  
  // @@protoc_insertion_point(field_mutable:ik.Request.request_content)
  return request_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_request_content() {
  // @@protoc_insertion_point(field_release:ik.Request.request_content)
  
  return request_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_request_content(::std::string* request_content) {
  if (request_content != NULL) {
    
  } else {
    
  }
  request_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_content);
  // @@protoc_insertion_point(field_set_allocated:ik.Request.request_content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpFileRequest::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpFileRequest::UpFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik.UpFileRequest)
}

void UpFileRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpFileRequest::UpFileRequest(const UpFileRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik.UpFileRequest)
}

void UpFileRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpFileRequest::~UpFileRequest() {
  // @@protoc_insertion_point(destructor:ik.UpFileRequest)
  SharedDtor();
}

void UpFileRequest::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UpFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpFileRequest_descriptor_;
}

const UpFileRequest& UpFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

UpFileRequest* UpFileRequest::default_instance_ = NULL;

UpFileRequest* UpFileRequest::New(::google::protobuf::Arena* arena) const {
  UpFileRequest* n = new UpFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik.UpFileRequest)
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik.UpFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik.UpFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik.UpFileRequest)
  return false;
#undef DO_
}

void UpFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik.UpFileRequest)
  // optional bytes file_name = 1;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->file_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik.UpFileRequest)
}

::google::protobuf::uint8* UpFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik.UpFileRequest)
  // optional bytes file_name = 1;
  if (this->file_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik.UpFileRequest)
  return target;
}

int UpFileRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik.UpFileRequest)
  int total_size = 0;

  // optional bytes file_name = 1;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik.UpFileRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpFileRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik.UpFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik.UpFileRequest)
    MergeFrom(*source);
  }
}

void UpFileRequest::MergeFrom(const UpFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik.UpFileRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
}

void UpFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik.UpFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpFileRequest::CopyFrom(const UpFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik.UpFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpFileRequest::IsInitialized() const {

  return true;
}

void UpFileRequest::Swap(UpFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpFileRequest::InternalSwap(UpFileRequest* other) {
  file_name_.Swap(&other->file_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpFileRequest_descriptor_;
  metadata.reflection = UpFileRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpFileRequest

// optional bytes file_name = 1;
void UpFileRequest::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpFileRequest::file_name() const {
  // @@protoc_insertion_point(field_get:ik.UpFileRequest.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpFileRequest::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik.UpFileRequest.file_name)
}
 void UpFileRequest::set_file_name(const char* value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik.UpFileRequest.file_name)
}
 void UpFileRequest::set_file_name(const void* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik.UpFileRequest.file_name)
}
 ::std::string* UpFileRequest::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:ik.UpFileRequest.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpFileRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:ik.UpFileRequest.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpFileRequest::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:ik.UpFileRequest.file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpFileResponse::kIsOkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpFileResponse::UpFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik.UpFileResponse)
}

void UpFileResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpFileResponse::UpFileResponse(const UpFileResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik.UpFileResponse)
}

void UpFileResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_ok_ = false;
}

UpFileResponse::~UpFileResponse() {
  // @@protoc_insertion_point(destructor:ik.UpFileResponse)
  SharedDtor();
}

void UpFileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpFileResponse_descriptor_;
}

const UpFileResponse& UpFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

UpFileResponse* UpFileResponse::default_instance_ = NULL;

UpFileResponse* UpFileResponse::New(::google::protobuf::Arena* arena) const {
  UpFileResponse* n = new UpFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik.UpFileResponse)
  is_ok_ = false;
}

bool UpFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik.UpFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_ok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik.UpFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik.UpFileResponse)
  return false;
#undef DO_
}

void UpFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik.UpFileResponse)
  // optional bool is_ok = 1;
  if (this->is_ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_ok(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik.UpFileResponse)
}

::google::protobuf::uint8* UpFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik.UpFileResponse)
  // optional bool is_ok = 1;
  if (this->is_ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_ok(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik.UpFileResponse)
  return target;
}

int UpFileResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik.UpFileResponse)
  int total_size = 0;

  // optional bool is_ok = 1;
  if (this->is_ok() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik.UpFileResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpFileResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik.UpFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik.UpFileResponse)
    MergeFrom(*source);
  }
}

void UpFileResponse::MergeFrom(const UpFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik.UpFileResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_ok() != 0) {
    set_is_ok(from.is_ok());
  }
}

void UpFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik.UpFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpFileResponse::CopyFrom(const UpFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik.UpFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpFileResponse::IsInitialized() const {

  return true;
}

void UpFileResponse::Swap(UpFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpFileResponse::InternalSwap(UpFileResponse* other) {
  std::swap(is_ok_, other->is_ok_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpFileResponse_descriptor_;
  metadata.reflection = UpFileResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpFileResponse

// optional bool is_ok = 1;
void UpFileResponse::clear_is_ok() {
  is_ok_ = false;
}
 bool UpFileResponse::is_ok() const {
  // @@protoc_insertion_point(field_get:ik.UpFileResponse.is_ok)
  return is_ok_;
}
 void UpFileResponse::set_is_ok(bool value) {
  
  is_ok_ = value;
  // @@protoc_insertion_point(field_set:ik.UpFileResponse.is_ok)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownLoadFileRequest::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownLoadFileRequest::DownLoadFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik.DownLoadFileRequest)
}

void DownLoadFileRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DownLoadFileRequest::DownLoadFileRequest(const DownLoadFileRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik.DownLoadFileRequest)
}

void DownLoadFileRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DownLoadFileRequest::~DownLoadFileRequest() {
  // @@protoc_insertion_point(destructor:ik.DownLoadFileRequest)
  SharedDtor();
}

void DownLoadFileRequest::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DownLoadFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownLoadFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownLoadFileRequest_descriptor_;
}

const DownLoadFileRequest& DownLoadFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

DownLoadFileRequest* DownLoadFileRequest::default_instance_ = NULL;

DownLoadFileRequest* DownLoadFileRequest::New(::google::protobuf::Arena* arena) const {
  DownLoadFileRequest* n = new DownLoadFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownLoadFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik.DownLoadFileRequest)
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DownLoadFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik.DownLoadFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik.DownLoadFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik.DownLoadFileRequest)
  return false;
#undef DO_
}

void DownLoadFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik.DownLoadFileRequest)
  // optional bytes file_name = 1;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->file_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik.DownLoadFileRequest)
}

::google::protobuf::uint8* DownLoadFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik.DownLoadFileRequest)
  // optional bytes file_name = 1;
  if (this->file_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik.DownLoadFileRequest)
  return target;
}

int DownLoadFileRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik.DownLoadFileRequest)
  int total_size = 0;

  // optional bytes file_name = 1;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownLoadFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik.DownLoadFileRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DownLoadFileRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DownLoadFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik.DownLoadFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik.DownLoadFileRequest)
    MergeFrom(*source);
  }
}

void DownLoadFileRequest::MergeFrom(const DownLoadFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik.DownLoadFileRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
}

void DownLoadFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik.DownLoadFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownLoadFileRequest::CopyFrom(const DownLoadFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik.DownLoadFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownLoadFileRequest::IsInitialized() const {

  return true;
}

void DownLoadFileRequest::Swap(DownLoadFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownLoadFileRequest::InternalSwap(DownLoadFileRequest* other) {
  file_name_.Swap(&other->file_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownLoadFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownLoadFileRequest_descriptor_;
  metadata.reflection = DownLoadFileRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownLoadFileRequest

// optional bytes file_name = 1;
void DownLoadFileRequest::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DownLoadFileRequest::file_name() const {
  // @@protoc_insertion_point(field_get:ik.DownLoadFileRequest.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownLoadFileRequest::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik.DownLoadFileRequest.file_name)
}
 void DownLoadFileRequest::set_file_name(const char* value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik.DownLoadFileRequest.file_name)
}
 void DownLoadFileRequest::set_file_name(const void* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik.DownLoadFileRequest.file_name)
}
 ::std::string* DownLoadFileRequest::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:ik.DownLoadFileRequest.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DownLoadFileRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:ik.DownLoadFileRequest.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DownLoadFileRequest::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:ik.DownLoadFileRequest.file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownLoadFileResponse::kIsDoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownLoadFileResponse::DownLoadFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik.DownLoadFileResponse)
}

void DownLoadFileResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DownLoadFileResponse::DownLoadFileResponse(const DownLoadFileResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik.DownLoadFileResponse)
}

void DownLoadFileResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_done_ = false;
}

DownLoadFileResponse::~DownLoadFileResponse() {
  // @@protoc_insertion_point(destructor:ik.DownLoadFileResponse)
  SharedDtor();
}

void DownLoadFileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DownLoadFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownLoadFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownLoadFileResponse_descriptor_;
}

const DownLoadFileResponse& DownLoadFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

DownLoadFileResponse* DownLoadFileResponse::default_instance_ = NULL;

DownLoadFileResponse* DownLoadFileResponse::New(::google::protobuf::Arena* arena) const {
  DownLoadFileResponse* n = new DownLoadFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownLoadFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik.DownLoadFileResponse)
  is_done_ = false;
}

bool DownLoadFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik.DownLoadFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_done = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_done_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik.DownLoadFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik.DownLoadFileResponse)
  return false;
#undef DO_
}

void DownLoadFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik.DownLoadFileResponse)
  // optional bool is_done = 1;
  if (this->is_done() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_done(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik.DownLoadFileResponse)
}

::google::protobuf::uint8* DownLoadFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik.DownLoadFileResponse)
  // optional bool is_done = 1;
  if (this->is_done() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_done(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik.DownLoadFileResponse)
  return target;
}

int DownLoadFileResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik.DownLoadFileResponse)
  int total_size = 0;

  // optional bool is_done = 1;
  if (this->is_done() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownLoadFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik.DownLoadFileResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DownLoadFileResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DownLoadFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik.DownLoadFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik.DownLoadFileResponse)
    MergeFrom(*source);
  }
}

void DownLoadFileResponse::MergeFrom(const DownLoadFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik.DownLoadFileResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_done() != 0) {
    set_is_done(from.is_done());
  }
}

void DownLoadFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik.DownLoadFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownLoadFileResponse::CopyFrom(const DownLoadFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik.DownLoadFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownLoadFileResponse::IsInitialized() const {

  return true;
}

void DownLoadFileResponse::Swap(DownLoadFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownLoadFileResponse::InternalSwap(DownLoadFileResponse* other) {
  std::swap(is_done_, other->is_done_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownLoadFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownLoadFileResponse_descriptor_;
  metadata.reflection = DownLoadFileResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownLoadFileResponse

// optional bool is_done = 1;
void DownLoadFileResponse::clear_is_done() {
  is_done_ = false;
}
 bool DownLoadFileResponse::is_done() const {
  // @@protoc_insertion_point(field_get:ik.DownLoadFileResponse.is_done)
  return is_done_;
}
 void DownLoadFileResponse::set_is_done(bool value) {
  
  is_done_ = value;
  // @@protoc_insertion_point(field_set:ik.DownLoadFileResponse.is_done)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchFileRequest::kMatchStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchFileRequest::SearchFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik.SearchFileRequest)
}

void SearchFileRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SearchFileRequest::SearchFileRequest(const SearchFileRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik.SearchFileRequest)
}

void SearchFileRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  match_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SearchFileRequest::~SearchFileRequest() {
  // @@protoc_insertion_point(destructor:ik.SearchFileRequest)
  SharedDtor();
}

void SearchFileRequest::SharedDtor() {
  match_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SearchFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchFileRequest_descriptor_;
}

const SearchFileRequest& SearchFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

SearchFileRequest* SearchFileRequest::default_instance_ = NULL;

SearchFileRequest* SearchFileRequest::New(::google::protobuf::Arena* arena) const {
  SearchFileRequest* n = new SearchFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik.SearchFileRequest)
  match_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SearchFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik.SearchFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes match_str = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_match_str()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik.SearchFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik.SearchFileRequest)
  return false;
#undef DO_
}

void SearchFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik.SearchFileRequest)
  // optional bytes match_str = 1;
  if (this->match_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->match_str(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik.SearchFileRequest)
}

::google::protobuf::uint8* SearchFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik.SearchFileRequest)
  // optional bytes match_str = 1;
  if (this->match_str().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->match_str(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik.SearchFileRequest)
  return target;
}

int SearchFileRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik.SearchFileRequest)
  int total_size = 0;

  // optional bytes match_str = 1;
  if (this->match_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->match_str());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik.SearchFileRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SearchFileRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik.SearchFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik.SearchFileRequest)
    MergeFrom(*source);
  }
}

void SearchFileRequest::MergeFrom(const SearchFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik.SearchFileRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.match_str().size() > 0) {

    match_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_str_);
  }
}

void SearchFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik.SearchFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchFileRequest::CopyFrom(const SearchFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik.SearchFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFileRequest::IsInitialized() const {

  return true;
}

void SearchFileRequest::Swap(SearchFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchFileRequest::InternalSwap(SearchFileRequest* other) {
  match_str_.Swap(&other->match_str_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchFileRequest_descriptor_;
  metadata.reflection = SearchFileRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchFileRequest

// optional bytes match_str = 1;
void SearchFileRequest::clear_match_str() {
  match_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SearchFileRequest::match_str() const {
  // @@protoc_insertion_point(field_get:ik.SearchFileRequest.match_str)
  return match_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SearchFileRequest::set_match_str(const ::std::string& value) {
  
  match_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik.SearchFileRequest.match_str)
}
 void SearchFileRequest::set_match_str(const char* value) {
  
  match_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik.SearchFileRequest.match_str)
}
 void SearchFileRequest::set_match_str(const void* value, size_t size) {
  
  match_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik.SearchFileRequest.match_str)
}
 ::std::string* SearchFileRequest::mutable_match_str() {
  
  // @@protoc_insertion_point(field_mutable:ik.SearchFileRequest.match_str)
  return match_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SearchFileRequest::release_match_str() {
  // @@protoc_insertion_point(field_release:ik.SearchFileRequest.match_str)
  
  return match_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SearchFileRequest::set_allocated_match_str(::std::string* match_str) {
  if (match_str != NULL) {
    
  } else {
    
  }
  match_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_str);
  // @@protoc_insertion_point(field_set_allocated:ik.SearchFileRequest.match_str)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchFileResponse::kFileNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchFileResponse::SearchFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik.SearchFileResponse)
}

void SearchFileResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SearchFileResponse::SearchFileResponse(const SearchFileResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik.SearchFileResponse)
}

void SearchFileResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

SearchFileResponse::~SearchFileResponse() {
  // @@protoc_insertion_point(destructor:ik.SearchFileResponse)
  SharedDtor();
}

void SearchFileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchFileResponse_descriptor_;
}

const SearchFileResponse& SearchFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

SearchFileResponse* SearchFileResponse::default_instance_ = NULL;

SearchFileResponse* SearchFileResponse::New(::google::protobuf::Arena* arena) const {
  SearchFileResponse* n = new SearchFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik.SearchFileResponse)
  file_names_.Clear();
}

bool SearchFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik.SearchFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes file_names = 1;
      case 1: {
        if (tag == 10) {
         parse_file_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_file_names()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_file_names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik.SearchFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik.SearchFileResponse)
  return false;
#undef DO_
}

void SearchFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik.SearchFileResponse)
  // repeated bytes file_names = 1;
  for (int i = 0; i < this->file_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->file_names(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ik.SearchFileResponse)
}

::google::protobuf::uint8* SearchFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik.SearchFileResponse)
  // repeated bytes file_names = 1;
  for (int i = 0; i < this->file_names_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->file_names(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik.SearchFileResponse)
  return target;
}

int SearchFileResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik.SearchFileResponse)
  int total_size = 0;

  // repeated bytes file_names = 1;
  total_size += 1 * this->file_names_size();
  for (int i = 0; i < this->file_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->file_names(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik.SearchFileResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SearchFileResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik.SearchFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik.SearchFileResponse)
    MergeFrom(*source);
  }
}

void SearchFileResponse::MergeFrom(const SearchFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik.SearchFileResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  file_names_.MergeFrom(from.file_names_);
}

void SearchFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik.SearchFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchFileResponse::CopyFrom(const SearchFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik.SearchFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFileResponse::IsInitialized() const {

  return true;
}

void SearchFileResponse::Swap(SearchFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchFileResponse::InternalSwap(SearchFileResponse* other) {
  file_names_.UnsafeArenaSwap(&other->file_names_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchFileResponse_descriptor_;
  metadata.reflection = SearchFileResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchFileResponse

// repeated bytes file_names = 1;
int SearchFileResponse::file_names_size() const {
  return file_names_.size();
}
void SearchFileResponse::clear_file_names() {
  file_names_.Clear();
}
 const ::std::string& SearchFileResponse::file_names(int index) const {
  // @@protoc_insertion_point(field_get:ik.SearchFileResponse.file_names)
  return file_names_.Get(index);
}
 ::std::string* SearchFileResponse::mutable_file_names(int index) {
  // @@protoc_insertion_point(field_mutable:ik.SearchFileResponse.file_names)
  return file_names_.Mutable(index);
}
 void SearchFileResponse::set_file_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ik.SearchFileResponse.file_names)
  file_names_.Mutable(index)->assign(value);
}
 void SearchFileResponse::set_file_names(int index, const char* value) {
  file_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ik.SearchFileResponse.file_names)
}
 void SearchFileResponse::set_file_names(int index, const void* value, size_t size) {
  file_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ik.SearchFileResponse.file_names)
}
 ::std::string* SearchFileResponse::add_file_names() {
  // @@protoc_insertion_point(field_add_mutable:ik.SearchFileResponse.file_names)
  return file_names_.Add();
}
 void SearchFileResponse::add_file_names(const ::std::string& value) {
  file_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ik.SearchFileResponse.file_names)
}
 void SearchFileResponse::add_file_names(const char* value) {
  file_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ik.SearchFileResponse.file_names)
}
 void SearchFileResponse::add_file_names(const void* value, size_t size) {
  file_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ik.SearchFileResponse.file_names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchFileResponse::file_names() const {
  // @@protoc_insertion_point(field_list:ik.SearchFileResponse.file_names)
  return file_names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchFileResponse::mutable_file_names() {
  // @@protoc_insertion_point(field_mutable_list:ik.SearchFileResponse.file_names)
  return &file_names_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteFileRequest::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteFileRequest::DeleteFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik.DeleteFileRequest)
}

void DeleteFileRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeleteFileRequest::DeleteFileRequest(const DeleteFileRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik.DeleteFileRequest)
}

void DeleteFileRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteFileRequest::~DeleteFileRequest() {
  // @@protoc_insertion_point(destructor:ik.DeleteFileRequest)
  SharedDtor();
}

void DeleteFileRequest::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DeleteFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFileRequest_descriptor_;
}

const DeleteFileRequest& DeleteFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

DeleteFileRequest* DeleteFileRequest::default_instance_ = NULL;

DeleteFileRequest* DeleteFileRequest::New(::google::protobuf::Arena* arena) const {
  DeleteFileRequest* n = new DeleteFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik.DeleteFileRequest)
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeleteFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik.DeleteFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik.DeleteFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik.DeleteFileRequest)
  return false;
#undef DO_
}

void DeleteFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik.DeleteFileRequest)
  // optional bytes file_name = 1;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->file_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik.DeleteFileRequest)
}

::google::protobuf::uint8* DeleteFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik.DeleteFileRequest)
  // optional bytes file_name = 1;
  if (this->file_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik.DeleteFileRequest)
  return target;
}

int DeleteFileRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik.DeleteFileRequest)
  int total_size = 0;

  // optional bytes file_name = 1;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->file_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik.DeleteFileRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteFileRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik.DeleteFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik.DeleteFileRequest)
    MergeFrom(*source);
  }
}

void DeleteFileRequest::MergeFrom(const DeleteFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik.DeleteFileRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
}

void DeleteFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik.DeleteFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFileRequest::CopyFrom(const DeleteFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik.DeleteFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFileRequest::IsInitialized() const {

  return true;
}

void DeleteFileRequest::Swap(DeleteFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteFileRequest::InternalSwap(DeleteFileRequest* other) {
  file_name_.Swap(&other->file_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFileRequest_descriptor_;
  metadata.reflection = DeleteFileRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteFileRequest

// optional bytes file_name = 1;
void DeleteFileRequest::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeleteFileRequest::file_name() const {
  // @@protoc_insertion_point(field_get:ik.DeleteFileRequest.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteFileRequest::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik.DeleteFileRequest.file_name)
}
 void DeleteFileRequest::set_file_name(const char* value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik.DeleteFileRequest.file_name)
}
 void DeleteFileRequest::set_file_name(const void* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik.DeleteFileRequest.file_name)
}
 ::std::string* DeleteFileRequest::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:ik.DeleteFileRequest.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeleteFileRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:ik.DeleteFileRequest.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteFileRequest::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:ik.DeleteFileRequest.file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteFileResponse::kIsOkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteFileResponse::DeleteFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik.DeleteFileResponse)
}

void DeleteFileResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeleteFileResponse::DeleteFileResponse(const DeleteFileResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik.DeleteFileResponse)
}

void DeleteFileResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_ok_ = false;
}

DeleteFileResponse::~DeleteFileResponse() {
  // @@protoc_insertion_point(destructor:ik.DeleteFileResponse)
  SharedDtor();
}

void DeleteFileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFileResponse_descriptor_;
}

const DeleteFileResponse& DeleteFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

DeleteFileResponse* DeleteFileResponse::default_instance_ = NULL;

DeleteFileResponse* DeleteFileResponse::New(::google::protobuf::Arena* arena) const {
  DeleteFileResponse* n = new DeleteFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik.DeleteFileResponse)
  is_ok_ = false;
}

bool DeleteFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik.DeleteFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_ok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik.DeleteFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik.DeleteFileResponse)
  return false;
#undef DO_
}

void DeleteFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik.DeleteFileResponse)
  // optional bool is_ok = 1;
  if (this->is_ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_ok(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik.DeleteFileResponse)
}

::google::protobuf::uint8* DeleteFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik.DeleteFileResponse)
  // optional bool is_ok = 1;
  if (this->is_ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_ok(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik.DeleteFileResponse)
  return target;
}

int DeleteFileResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik.DeleteFileResponse)
  int total_size = 0;

  // optional bool is_ok = 1;
  if (this->is_ok() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik.DeleteFileResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteFileResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik.DeleteFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik.DeleteFileResponse)
    MergeFrom(*source);
  }
}

void DeleteFileResponse::MergeFrom(const DeleteFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik.DeleteFileResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_ok() != 0) {
    set_is_ok(from.is_ok());
  }
}

void DeleteFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik.DeleteFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFileResponse::CopyFrom(const DeleteFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik.DeleteFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFileResponse::IsInitialized() const {

  return true;
}

void DeleteFileResponse::Swap(DeleteFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteFileResponse::InternalSwap(DeleteFileResponse* other) {
  std::swap(is_ok_, other->is_ok_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFileResponse_descriptor_;
  metadata.reflection = DeleteFileResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteFileResponse

// optional bool is_ok = 1;
void DeleteFileResponse::clear_is_ok() {
  is_ok_ = false;
}
 bool DeleteFileResponse::is_ok() const {
  // @@protoc_insertion_point(field_get:ik.DeleteFileResponse.is_ok)
  return is_ok_;
}
 void DeleteFileResponse::set_is_ok(bool value) {
  
  is_ok_ = value;
  // @@protoc_insertion_point(field_set:ik.DeleteFileResponse.is_ok)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ik

// @@protoc_insertion_point(global_scope)
